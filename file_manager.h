/*
    FILE MANAGER
*/
#pragma once

#include <QFileDialog>
#include <QFile>
#include <QMessageBox>
#include <QOpenGLWidget>
#include <QTextStream>
#include <QTableWidget>
#include <vector>

#include "mainwindow.h"

using namespace std;

//Class containing all the function used to save or load files
class FileIOFunctions
{
public:
    //Import a csv table
    static vector<vector<QString>> import_csv()
    {
        vector<vector<QString>> list;

        QString file_name = QFileDialog::getOpenFileName(nullptr, "Import list", "", "CSV table (*.csv)");

        //Check if the user selected a path
        if(!file_name.isEmpty())
        {
            QFile table_in(file_name);
            table_in.open(QIODevice::ReadWrite);

            //Write the content of the file to the 'input' stream
            QTextStream input(&table_in);
            QString file_content = input.readAll();

            //Parse the 'list_content' string and store the values in the 'list' table after emptying it
            list.clear();

            QStringList rows = file_content.split("\n", QString::SkipEmptyParts);
            for(int i = 0; i < rows.length(); i ++)
            {
                QStringList columns = rows[i].split(",");
                if(columns.length() == 5)
                {
                    vector<QString> entry;
                    for(int j = 0; j < columns.length(); j++)
                    {
                        entry.push_back(columns[j]);
                    }
                    list.push_back(entry);
                }
                else
                {
                    QMessageBox error_msg_box;
                    error_msg_box.setText("The selected table is not supported.");
                    error_msg_box.exec();
                    break;
                }
            }

            //Close the file
            table_in.close();
        }
        return list;
    }

    //Save the diagram displayed on 'gl_widget' as a PNG or JPEG image
    static void save_image(QOpenGLWidget* gl_widget)
    {
        QImage saved_image = gl_widget->grabFramebuffer();
        QString file_name = QFileDialog::getSaveFileName(nullptr, "Export the diagram as an image", "untitled", "PNG image (*.png);; JPEG image (*.jpg)");
        //Check if the user selected a path
        if(!file_name.isEmpty())
        {
            saved_image.save(file_name);
        }
    }

    //Encode and save the content of 'list' as a '.sgl' file
    static void save_list_as_new(vector<vector<QString>> list)
    {
        QString file_name = QFileDialog::getSaveFileName(nullptr, "Save as new list", "untitled", "StarGraph list (*.sgl)");
        //Checks if the user selected a path
        if(!file_name.isEmpty())
        {
            QFile entry_table_out(file_name);
            entry_table_out.open(QIODevice::WriteOnly);

            //Write the warning message in the 'output' stream, which is connected to the newly created file.
            QTextStream output(&entry_table_out);
            QString content;
            QString encoding_version = "10";
            output << "[IMPORTANT]\nFile generated by Stargraph. Open it using Stargraph v1.0.3 to view it properly.\n";

            //Encode the content using column and row separators
            for(unsigned i = 0; i < list.size(); i ++)
            {
                for(unsigned j = 0; j < 3; j ++)
                {
                    content.append(list[i][j]);
                    if(j < 2)
                    {
                        content.append("_cs_");
                    }
                }
                if(i < list.size() - 1)
                {
                    content.append("_rs_");
                }
            }

            //Obfuscate the information via base64 encoding and then write it to the 'output' stream
            output << (encoding_version + content).toUtf8().toBase64(QByteArray::Base64UrlEncoding | QByteArray::OmitTrailingEquals);

            //Close the file
            entry_table_out.close();
        }
    }

    //Decode and load the content of a '.sgl' file to the 'list' table
    static vector<vector<QString>> open_list()
    {
        vector<vector<QString>> list;

        QString file_name = QFileDialog::getOpenFileName(nullptr, "Open list", "", "StarGraph list (*.sgl)");
        //Check if the user selected a path
        if(!file_name.isEmpty())
        {
            QFile entry_table_in(file_name);
            entry_table_in.open(QIODevice::ReadWrite);

            //Write the content of the file to the 'input' stream
            QTextStream input(&entry_table_in);
            QString file_content = input.readAll();

            //Split the 'file_content' string into three lines, decode the third one and store its value in the 'list_content' array
            QByteArray list_content = QByteArray::fromBase64(file_content.split("\n")[2].toUtf8(), QByteArray::Base64UrlEncoding | QByteArray::OmitTrailingEquals);

            //Check the version of stargraph in which the file was encoded
            if(list_content.toStdString()[0] == '1' && list_content.toStdString()[1] == '0')
            {
                list_content = list_content.remove(0, 2);

                //Parse the 'list_content' string and store the values in the 'list' table after emptying it
                list.clear();

                QStringList rows = QString::fromUtf8(list_content).split("_rs_");
                for(int i = 0; i < rows.length(); i ++)
                {
                    QStringList columns = rows[i].split("_cs_");
                    vector<QString> entry;
                    for(int j = 0; j < columns.length(); j++)
                    {
                        entry.push_back(columns[j]);
                    }
                    entry.push_back(ParameterCalculation::get_spectral_class_str(columns[1]));
                    entry.push_back(ParameterCalculation::get_absolute_magnitude_str(columns[2]));

                    list.push_back(entry);
                }

                //Close the file
                entry_table_in.close();
            }
        }
        return list;
    }
};
