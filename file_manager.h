/*
    FILE MANAGER
*/

#ifndef FILE_MANAGER_H
#define FILE_MANAGER_H

#include <QOpenGLWidget>
#include <QFileDialog>
#include <QFile>
#include <QTextStream>
#include <QTableWidget>
#include <QMessageBox>

//Class containing all the function used to save or load files
class FileIOFunctions
{
public:
    //Imports a csv table
    static void import_csv(QTableWidget* list)
    {
        QString file_name = QFileDialog::getOpenFileName(nullptr, "Import list", "", "CSV table (*.csv)");
        QFile table_in(file_name);
        table_in.open(QIODevice::ReadWrite);

        //Writes the content of the file to the 'input' stream
        QTextStream input(&table_in);
        QString file_content = input.readAll();

        //Parses the 'list_content' string and stores the values in the 'list' table after emptying it
        list->clearContents();
        list->setRowCount(0);

        QStringList rows = file_content.split("\n");
        for(int i = 0; i < rows.length(); i ++)
        {
            QStringList columns = rows[i].split(",");
            if(columns.length() == 5)
            {

                list->insertRow(list->rowCount());
                for(int j = 0; j < columns.length(); j++)
                {
                    list->setItem(i, j, new QTableWidgetItem(columns[j]));
                }
            }
            else
            {
                QMessageBox error_msg_box;
                error_msg_box.setText("The selected table is not supported.");
                error_msg_box.exec();
                break;
            }
        }

        //Closes the file
        table_in.close();
    }

    //Saves the diagram displayed on 'gl_widget' as a PNG or JPEG image
    static void save_image(QOpenGLWidget* gl_widget)
    {
        QImage saved_image = gl_widget->grabFramebuffer();
        QString file_name = QFileDialog::getSaveFileName(nullptr, "Export the diagram as an image", "untitled", "PNG image (*.png);; JPEG image (*.jpg)");
        saved_image.save(file_name);
    }

    //Encodes and saves the content of 'list' as a '.sgl' file
    static void save_list_as_new(QTableWidget* list)
    {
        QString file_name = QFileDialog::getSaveFileName(nullptr, "Save as new list", "untitled", "StarGraph list (*.sgl)");
        QFile entry_list_out(file_name);
        entry_list_out.open(QIODevice::WriteOnly);

        //Writes the warning message in the 'output' stream, which is connected to the newly created file.
        QTextStream output(&entry_list_out);
        QString content;
        output << "[IMPORTANT]\nFile generated by Stargraph. Open it using Stargraph v1.0.1 to view it properly.\n";

        //Encodes the content using column and row separators
        for(int i = 0; i < list->rowCount(); i ++)
        {
            for(int j = 0; j < list->columnCount(); j ++)
            {
                content.append(list->item(i, j)->text());
                if(j < list->columnCount() - 1)
                {
                    content.append("_colsep_");
                }
            }
            if(i < list->rowCount() - 1)
            {
                content.append("_rowsep_");
            }
        }

        //Obfuscates the information via base64 encoding and then writes it in the 'output' stream
        output << content.toUtf8().toBase64(QByteArray::Base64UrlEncoding | QByteArray::OmitTrailingEquals);

        //Closes the file
        entry_list_out.close();
    }

    //Decodes and loads the content of a '.sgl' file to the 'list' table
    static void open_list(QTableWidget* list)
    {
        QString file_name = QFileDialog::getOpenFileName(nullptr, "Open list", "", "StarGraph list (*.sgl)");
        QFile entry_list_in(file_name);
        entry_list_in.open(QIODevice::ReadWrite);

        //Writes the content of the file to the 'input' stream
        QTextStream input(&entry_list_in);
        QString file_content = input.readAll();

        //Splits the 'file_content' string into three lines, decodes the third one and store its value in the 'list_content' array
        QByteArray list_content = QByteArray::fromBase64(file_content.split("\n")[2].toUtf8(), QByteArray::Base64UrlEncoding | QByteArray::OmitTrailingEquals);

        //Parses the 'list_content' string and stores the values in the 'list' table after emptying it
        list->clearContents();
        list->setRowCount(0);

        QStringList rows = QString::fromUtf8(list_content).split("_rowsep_");
        for(int i = 0; i < rows.length(); i ++)
        {         
            QStringList columns = rows[i].split("_colsep_");
            list->insertRow(list->rowCount());
            for(int j = 0; j < columns.length(); j++)
            { 
                list->setItem(i, j, new QTableWidgetItem(columns[j]));
            }
        }

        //Closes the file
        entry_list_in.close();
    }
};

#endif // FILE_MANAGER_H
